{"version":3,"sources":["components/NavBar.js","components/VideoGame.js","components/AddVideoGame.js","components/UpdateVideoGame.js","components/VideoGames.js","components/BoardGames.js","components/CardGames.js","components/MindGames.js","components/OutdoorGames.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","to","className","VideoGame","displayPlayers","game","deleteGame","updateGame","parseInt","num_players_max","num_players_min","title","platform","desc","onClick","_id","AddVideoGame","refreshGames","useState","setTitle","setPlatform","setPlayerMin","setPlayerMax","setDesc","onSubmit","event","preventDefault","fetch","process","method","headers","body","JSON","stringify","then","type","value","placeholder","onChange","target","required","min","UpdateVideoGame","id","VideoGames","videoGames","setVideoGames","isCreate","setIsCreate","gameToUpdate","setUpdateGame","useEffect","getVideoGames","response","json","deleteVideoGame","displayGames","map","key","formToRender","data","console","log","renderForm","BoardGames","CardGames","MindGames","OutdoorGames","Home","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd746bcb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NavBar = () =>{\r\n    return (\r\n        <nav>\r\n            <Link to='/' className=\"link\">Home</Link>\r\n            <Link to='/VideoGames' className=\"link\">Video Games</Link>\r\n            <Link to='/BoardGames' className=\"link\">Board Games</Link>\r\n            <Link to='/CardGames' className=\"link\">Card Games</Link>\r\n            <Link to='/OutdoorGames' className=\"link\">Outdoor Games</Link>\r\n            <Link to='/MindGames' className=\"link\">Mind Games</Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst VideoGame = ({game, deleteGame, updateGame}) =>{\r\n    let displayPlayers;\r\n    let max = parseInt(game.num_players_max);\r\n    if(max === 1){\r\n        displayPlayers = <p>Single Player</p>\r\n    }else if(game.num_players_min === game.num_players_max){\r\n        displayPlayers = <p>Players: {game.num_players_max}</p>\r\n    }else{\r\n        displayPlayers = <p>Players: {game.num_players_min}-{game.num_players_max}</p>\r\n    }\r\n    return(\r\n        <div>\r\n            <h4>{game.title}</h4>\r\n            <p>{game.platform}</p>\r\n            {displayPlayers}\r\n            <p>{game.desc}</p>\r\n            <button onClick={() => deleteGame(game._id)}>Delete</button>\r\n            <button onClick={() => updateGame(game)}>Edit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoGame;","import React, {useState} from 'react';\r\n\r\nconst AddVideoGame = ({refreshGames}) =>{\r\n    const [title, setTitle] = useState('');\r\n    const [platform, setPlatform] = useState('');\r\n    const [num_players_min, setPlayerMin] = useState('');\r\n    const [num_players_max, setPlayerMax] = useState('');\r\n    const [desc, setDesc] = useState('');\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        const game = {\r\n            title,\r\n            platform,\r\n            num_players_min,\r\n            num_players_max,\r\n            desc\r\n        }\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/video-games`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(game)\r\n        }).then(refreshGames)\r\n            .then(() => setTitle(''))\r\n            .then(() => setPlatform(''))\r\n            .then(() => setPlayerMin(''))\r\n            .then(() => setPlayerMax(''))\r\n            .then(() => setDesc(''))\r\n    }\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <h3>Add Video Game</h3>\r\n            <input type='text'\r\n                value={title}\r\n                placeholder='Game Title' \r\n                onChange={({target}) => setTitle(target.value)} \r\n                required/>\r\n            <input type='text'\r\n                value={platform}\r\n                placeholder='Platform' \r\n                onChange={({target}) => setPlatform(target.value)}\r\n                required/>\r\n            <input type='number'\r\n                value={num_players_min}\r\n                placeholder='Minimun Players' \r\n                onChange={({target}) => setPlayerMin(target.value)}\r\n                min='1' \r\n                required/>\r\n            <input type='number'\r\n                value={num_players_max} \r\n                placeholder='Max Players' \r\n                onChange={({target}) => setPlayerMax(target.value)}\r\n                min={num_players_min} \r\n                required/>\r\n            <input type='text'\r\n                value={desc} \r\n                placeholder='Game Description' \r\n                onChange={({target}) => setDesc(target.value)} \r\n                required/>\r\n            <input type='submit'\r\n                value='Add to Games'/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddVideoGame;","import React, {useState} from 'react';\r\n\r\nconst UpdateVideoGame = ({refreshGames, game, id}) =>{\r\n    const [title, setTitle] = useState(game.title);\r\n    const [platform, setPlatform] = useState(game.platform);\r\n    const [num_players_min, setPlayerMin] = useState(game.num_players_min);\r\n    const [num_players_max, setPlayerMax] = useState(game.num_players_max);\r\n    const [desc, setDesc] = useState(game.desc);\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        const game = {\r\n            title,\r\n            platform,\r\n            num_players_min,\r\n            num_players_max,\r\n            desc\r\n        }\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/video-games/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(game)\r\n        }).then(refreshGames)\r\n            .then(() => setTitle(''))\r\n            .then(() => setPlatform(''))\r\n            .then(() => setPlayerMin(''))\r\n            .then(() => setPlayerMax(''))\r\n            .then(() => setDesc(''))\r\n    }\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <h3>Edit Video Game</h3>\r\n            <input type='text'\r\n                value={title}\r\n                placeholder='Game Title' \r\n                onChange={({target}) => setTitle(target.value)} \r\n                required/>\r\n            <input type='text'\r\n                value={platform}\r\n                placeholder='Platform' \r\n                onChange={({target}) => setPlatform(target.value)}\r\n                required/>\r\n            <input type='number'\r\n                value={num_players_min}\r\n                placeholder='Minimun Players' \r\n                onChange={({target}) => setPlayerMin(target.value)}\r\n                min='1' \r\n                required/>\r\n            <input type='number'\r\n                value={num_players_max} \r\n                placeholder='Max Players' \r\n                onChange={({target}) => setPlayerMax(target.value)}\r\n                min={num_players_min} \r\n                required/>\r\n            <input type='text'\r\n                value={desc} \r\n                placeholder='Game Description' \r\n                onChange={({target}) => setDesc(target.value)} \r\n                required/>\r\n            <input type='submit'\r\n                value='Update Game'/>\r\n            <input type=\"button\" \r\n            value=\"Cancel Edit\" \r\n            onClick={refreshGames}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UpdateVideoGame;","import React, {useState, useEffect} from 'react';\r\nimport NavBar from './NavBar'\r\nimport VideoGame from './VideoGame';\r\nimport AddVideoGame from './AddVideoGame';\r\nimport UpdateVideoGame from './UpdateVideoGame'\r\n\r\nconst VideoGames = () =>{\r\n    const [videoGames, setVideoGames] = useState([]);\r\n    const [isCreate, setIsCreate] = useState(true);\r\n    const [gameToUpdate, setUpdateGame] = useState({});\r\n\r\n    useEffect(() =>{    //equivalent to componentDidMount\r\n        getVideoGames();\r\n    }, [])\r\n\r\n    const getVideoGames = () =>{\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/video-games`)\r\n            .then(response => response.json())\r\n            .then(videoGames => setVideoGames(videoGames))\r\n            .then(() => setIsCreate(true))\r\n    }\r\n    const deleteVideoGame = (id) =>{\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/video-games/${id}`, {\r\n        method: 'DELETE',\r\n        }).then(response => response.json())\r\n            .then(getVideoGames)\r\n    }\r\n\r\n    const updateGame = (game) =>{\r\n        setIsCreate(false);\r\n        setUpdateGame(game);\r\n    }\r\n    const renderForm = () =>{\r\n        let formToRender;\r\n        if(isCreate){\r\n            formToRender = <AddVideoGame key=\"createForm\" \r\n                refreshGames={getVideoGames}/>;\r\n        }else{\r\n            const data = gameToUpdate;\r\n            console.log(`Data's ID: ${data._id}`);\r\n            formToRender = <UpdateVideoGame key={data._id}\r\n                id={data._id}\r\n                game={data} \r\n                refreshGames={getVideoGames}/>;\r\n        }\r\n        return formToRender;\r\n    }\r\n    const displayGames = videoGames.map((game) =>{\r\n        return <VideoGame key={game._id}\r\n                game={game} \r\n                deleteGame={deleteVideoGame} \r\n                updateGame={updateGame}/>\r\n    });\r\n\r\n    return (\r\n    <>\r\n        <NavBar/>\r\n        <div className ='wrapper'>\r\n            <h1>Video Game Collection</h1>\r\n            {renderForm()}\r\n            <main>{displayGames}</main>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default VideoGames;","import React from 'react';\r\nimport NavBar from './NavBar'\r\n\r\nconst BoardGames = () =>{\r\n    return (\r\n        <>\r\n            <NavBar/>        \r\n            <h1>Board Game Collection</h1>\r\n            <p>View features of this app on the Video Games page. Other pages are placeholders for a future project.</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BoardGames;","import React from 'react';\r\nimport NavBar from './NavBar'\r\n\r\nconst CardGames = () =>{\r\n    return (\r\n        <>\r\n            <NavBar/>        \r\n            <h1>Card Game Collection</h1>\r\n            <p>View features of this app on the Video Games page. Other pages are placeholders for a future project.</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardGames;","import React from 'react';\r\nimport NavBar from './NavBar'\r\n\r\nconst MindGames = () =>{\r\n    return (\r\n        <>\r\n            <NavBar/>\r\n            <h1>Mind Games</h1>\r\n            <p>View features of this app on the Video Games page. Other pages are placeholders for a future project.</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MindGames;","import React from 'react';\r\nimport NavBar from './NavBar'\r\n\r\nconst OutdoorGames = () =>{\r\n    return (\r\n        <>\r\n            <NavBar/>        \r\n            <h1>Outdoor Games</h1>\r\n            <p>View features of this app on the Video Games page. Other pages are placeholders for a future project.</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OutdoorGames;","import React from 'react';\r\nimport NavBar from './NavBar'\r\n\r\nconst Home = () =>{\r\n    return (\r\n        <>\r\n            <NavBar/>\r\n            <h1>Home</h1>\r\n            <p>View features of this app on the Video Games page. Other pages are placeholders for a future project.</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport VideoGames from './components/VideoGames';\nimport BoardGames from './components/BoardGames';\nimport CardGames from './components/CardGames';\nimport MindGames from './components/MindGames'\nimport OutdoorGames from './components/OutdoorGames';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/VideoGames\">\n            <VideoGames/>\n          </Route>\n          <Route path=\"/BoardGames\">\n            <BoardGames/>\n          </Route>\n          <Route path=\"/CardGames\">\n            <CardGames/>\n          </Route>\n          <Route path=\"/MindGames\">\n            <MindGames/>\n          </Route>\n          <Route path=\"/OutdoorGames\">\n            <OutdoorGames/>\n          </Route>\n          <Route path=\"/\" exact>\n            <Home/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}